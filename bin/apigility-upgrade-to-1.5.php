#!/usr/bin/env php
<?php // @codingStandardsIgnoreFile
/**
 * Script for updating an Apigility application to use latest ZF component v3 releases.
 *
 * @license   http://opensource.org/licenses/BSD-3-Clause BSD-3-Clause
 * @copyright Copyright (c) 2016 Zend Technologies USA Inc. (http://www.zend.com)
 */

// Configuration
$path = realpath(getcwd());
$composer = 'composer';
$modulesToRemove = [
    'AssetManager',
    'ZF\DevelopmentMode',
];
$modulesToAdd = [
    'Zend\Db',
    'Zend\Filter',
    'Zend\Hydrator',
    'Zend\InputFilter',
    'Zend\Paginator',
    'Zend\Router',
    'Zend\Validator',
];

// Check arguments
if ($argc > 1) {
    if (in_array($argv[1], ['-h', '--help'], true)) {
        help();
        exit(0);
    }

    if ($argc != 3 || ! in_array($argv[1], ['-c', '--composer'], true)) {
        fwrite(STDERR, "Invalid arguments supplied\n\n");
        help(STDERR);
        exit(1);
    }

    if (! file_exists($argv[2])) {
        fwrite(STDERR, "Provided composer binary does not exist\n\n");
        help(STDERR);
        exit(1);
    }

    $composer = $argv[2];
}

// Workflow
echo "Upgrading your Apigility application to use Zend Framework v3 components.\n\n";

echo "Updating composer.json...\n";
$result = updateComposerJson($path);
if (! $result->status) {
    fwrite(STDERR, sprintf("%s\n", $result->message));
    exit(1);
}

echo "Updating module list...\n";
$result = updateModulesList($path, $modulesToRemove, $modulesToAdd);
if (! $result->status) {
    fwrite(STDERR, sprintf("%s\n", $result->message));
    exit(1);
}

echo "Removing previously installed dependencies...\n";
removeInstalledDependencies($path);

echo "Installing new dependencies...\n";
$result = installDependencies($composer);
if (! $result->status) {
    fwrite(STDERR, sprintf("%s\n", $result->message));
    exit(1);
}

echo "\nUpgrade complete!\n";
exit(0);

// Functions

/**
 * @param string $path
 * @return Result
 */
function updateComposerJson($path)
{
    $composerJsonFile = sprintf('%s/composer.json', $path);

    if (! file_exists($composerJsonFile)) {
        return new Result(
            false,
            'Could not locate composer.json; are you running this from your project root?'
        );
    }

    $composerJson = file_get_contents($path . '/composer.json');
    $composer = json_decode($composerJson, true);

    // Remove entries
    if (isset($composer['require']['zendframework/zendframework'])) {
        unset($composer['require']['zendframework/zendframework']);
    }
    if (isset($composer['require']['rwoverdijk/assetmanager'])) {
        unset($composer['require']['rwoverdijk/assetmanager']);
    }
    if (isset($composer['require-dev']['zendframework/zftool'])) {
        unset($composer['require-dev']['zendframework/zftool']);
    }

    // Add entries that may not exist already
    if (! isset($composer['require-dev']['zfcampus/zf-asset-manager'])) {
        $composer['require-dev']['zfcampus/zf-asset-manager'] = '^1.0';
    }

    // Update existing entries
    $composer['require']['zfcampus/zf-development-mode'] = '^2.1 || ^3.0';
    $composer['require-dev']['zendframework/zend-developer-tools'] = '^1.1';

    $composerJson = json_encode($composer, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    file_put_contents($composerJsonFile, $composerJson);

    return new Result(true);
}

/**
 * @param string $path
 * @param array $modulesToRemove
 * @param array $modulesToAdd
 * @return Result
 */
function updateModulesList($path, array $modulesToRemove, array $modulesToAdd)
{
    $moduleListFile = sprintf('%s/config/modules.config.php', $path);

    if (! file_exists($moduleListFile)) {
        return new Result(
            false,
            'Could not locate config/modules.config.php; are you running this from an Apigility project?'
        );
    }

    $moduleList = include $moduleListFile;

    if (! is_array($moduleList)) {
        return new Result(
            false,
            'config/modules.config.php did not return an array; please check the file.'
        );
    }

    // Create a backup
    copy($moduleListFile, $moduleListFile . '.old');

    // Remove modules
    $moduleList = array_filter($moduleList, function ($module) use ($modulesToRemove) {
        return ! in_array($module, $modulesToRemove);
    });

    // Prepend ZF modules
    array_splice($moduleList, 0, 0, $modulesToAdd);

    // Prepare contents for modules configuration
    $moduleList = array_map(function ($module) {
        return sprintf("'%s'", $module);
    }, $moduleList);

    $template =<<<'EOC'
<?php
/**
 * Configuration file generated by zf-apigility-admin/bin/upgrade-to-1.5.php.
 *
 * Original version is now in modules.config.php.old.
 */
return [
    %s,
];
EOC;
    $fileContents = sprintf($template, implode(",\n    ", $moduleList));
    file_put_contents($moduleListFile, $fileContents);

    return new Result(true);
}

/**
 * @param string $path
 * @return void
 */
function removeInstalledDependencies($path)
{
    $lockPath = sprintf('%s/composer.lock', $path);
    if (file_exists($lockPath)) {
        unlink($lockPath);
    }

    removePath(sprintf('%s/vendor', $path));
}

/**
 * @param string $path Directory to remove
 * @return void
 */
function removePath($path)
{
    if (! is_dir($path)) {
        return;
    }

    foreach (new DirectoryIterator($path) as $file) {
        if (in_array($file->getBaseName(), ['.', '..'], true)) {
            continue;
        }

        if ($file->isDir() && ! $file->isLink()) {
            removePath($file->getPathname());
            continue;
        }

        unlink($file->getPathname());
    }

    rmdir($path);
}

/**
 * @var string $composer Composer binary
 * @return Result
 */
function installDependencies($composer)
{
    $status = 0;
    $command = sprintf('%s install', $composer);
    system($command, $status);

    if ($status !== 0) {
        return new Result(
            false,
            'composer install did not complete successfully; run manually to debug'
        );
    }

    return new Result(true);
}

/**
 * Emit the help message on the specified stream.
 *
 * @var resource $stream
 * @return void
 */
function help($stream = STDOUT)
{
    $usage =<<<'EOC'
Update an Apigility component to use Zend Framework component v3 releases.

Usage:

  vendor/bin/apigility-upgrade-to-1.5.php [options]

Options:

  -h|--help               Display this message
  -c|--composer <path>    Path to composer binary; defaults to "composer"
                          (assumes discoverable via user PATH)
EOC;

    fwrite($stream, $usage);
}

/**
 * Value object describing an operation result.
 */
class Result
{
    /**
     * @var string
     */
    public $message = '';

    /**
     * @var bool
     */
    public $status;

    /**
     * @param bool $status
     * @param string $message
     */
    public function __construct($status, $message = '')
    {
        $this->status = $status;
        $this->message = $message;
    }
}
